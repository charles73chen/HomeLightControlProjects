package home;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.RandomStringUtils;
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.MqttSecurityException;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;
import org.json.JSONObject;
import org.json.JSONTokener;

import com.pi4j.io.gpio.GpioController;
import com.pi4j.io.gpio.GpioFactory;
import com.pi4j.io.gpio.GpioPinDigitalInput;
import com.pi4j.io.gpio.GpioPinDigitalOutput;
import com.pi4j.io.gpio.PinPullResistance;
import com.pi4j.io.gpio.RaspiPin;
import com.pi4j.io.gpio.event.GpioPinDigitalStateChangeEvent;
import com.pi4j.io.gpio.event.GpioPinListenerDigital;

public class mqttClent {

	final static GpioController gpio = GpioFactory.getInstance();
	final static GpioPinDigitalOutput GPIO_01 = gpio.provisionDigitalOutputPin(RaspiPin.GPIO_01);
	final static GpioPinDigitalInput pir = gpio.provisionDigitalInputPin(RaspiPin.GPIO_00, "PIR",
			PinPullResistance.PULL_DOWN);

	public static void main(String[] args) {

		// String topic = "home/";
		int qos = 0;
		String broker = "tcp://" + publicfield.MQTT_SERVER + ":" + publicfield.PORT;
		String clientId = RandomStringUtils.randomAlphanumeric(30).toUpperCase();

		final Boolean subscriber = true;
		final Boolean publisher = true;
		MemoryPersistence persistence = new MemoryPersistence();

		try {
			//Thread.sleep(10000);
			//GPIO_01.setState(true);
			MqttClient sampleClient = new MqttClient(broker, clientId, persistence);
			sampleClient.setCallback(new MqttCallback() { // 1
				@Override
				public void connectionLost(Throwable throwable) {
					// Called when connection is lost.	
					
				}

				@Override
				public void messageArrived(String topic, MqttMessage mqttMessage) throws Exception {

					String str = new String(mqttMessage.getPayload());
					System.out.println("msg: " + str);
					org.json.JSONTokener tokener = new JSONTokener(str);
					// JSONObject json = new JSONObject(tokener);
					// String tar = json.getString("tar"); //str.split("-")[1];
					// String actstr = json.getString("act");
					// //str.split("-")[0];

					if ("/home/book/GPIO_01".equals(topic)) {
						if (str.equals("on")) {
							GPIO_01.setState(true);
						}
						if (str.equals("off")) {
							GPIO_01.setState(false);
						}
						if (str.equals("state")) {
							GPIO_01.getState().getValue();
							MqttClient publishClient = new MqttClient(broker, clientId, persistence);
							MqttConnectOptions connOpts = new MqttConnectOptions();
							connOpts.setCleanSession(true);
							publishClient.connect(connOpts);
							MqttMessage message = new MqttMessage(
									(String.valueOf(GPIO_01.getState().getValue())).getBytes());
							message.setQos(qos);
							publishClient.publish(topic, message);
							publishClient.disconnect();
						}
					}

					if ("/home/book/irswitch".equals(topic)) {
						if (str.equals("on")) {
							pir.addListener(new GpioPinListenerDigital() {
								public void handleGpioPinDigitalStateChangeEvent(GpioPinDigitalStateChangeEvent event) {
									// System.out.println(event.getState().getName());
									if (event.getState().isHigh()) {
										// System.out.println("Motion
										// Detected!");
										GPIO_01.setState(true);
									}

									if (event.getState().isLow()) {
										// System.out.println("All is
										// quiet...");
										GPIO_01.setState(false);
									}

								}

							});
						} else {
							pir.removeAllListeners();
						}
					}

				}

				@Override
				public void deliveryComplete(final IMqttDeliveryToken iMqttDeliveryToken) {
					// When message delivery was complete
				}

			});
			sampleClient.connect();
			// List<String> subscribeList = new ArrayList<String>();
			// for (topic e : home.topic.values()) {
			// subscribeList.add(e.getValue());
			// }

			String[] t = { "/home/book/GPIO_01", "/home/book/irswitch" };
			;
			sampleClient.subscribe(t);
		} catch (Exception me) {
			// System.out.println("reason "+me.getReasonCode());
			System.out.println("msg " + me.getMessage());
			System.out.println("loc " + me.getLocalizedMessage());
			System.out.println("cause " + me.getCause());
			System.out.println("excep " + me);
			me.printStackTrace();
		}
	}

}
